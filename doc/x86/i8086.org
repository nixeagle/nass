* Instruction format

** d

1 bit

| binary | what?         |
|--------+---------------|
|      0 | to register   |
|      1 | from register |
|        |               |

** mod

2 bits

| binary | what?                                                      |
|--------+------------------------------------------------------------|
|     00 | disp = 0*, disp-high and disp-low absent                   |
|     01 | disp = disp-low sign extended to 16-bits, disp-high absent |
|     10 | disp = disp-high:disp-low                                  |
|     11 | r/m is treated as a register                               |

** r/m

3 bits

| binary | what?                           |
|--------+---------------------------------|
|    000 | ea = (bx) + (si) + disp         |
|    001 | ea = (bx) + (di) + disp         |
|    010 | ea = (bp) + (si) + disp         |
|    011 | ea = (bp) + (di) + disp         |
|    100 | ea = (si) + disp                |
|    101 | ea = (di) + disp                |
|    110 | ea = (bp) + disp                |
|    111 | ea = (bx) + disp                |

If r/m is 110, and mod is 00, then ea = disp-high:disp-low.

** reg

3 bits, except for the 2 bit segment registers.

| binary | w = 1 | binary | w = 0 | binary | segment |
|--------+-------+--------+-------+--------+---------|
|    000 | ax    |    000 | al    |     00 | es      |
|    001 | cx    |    001 | cl    |     01 | cs      |
|    010 | dx    |    010 | dl    |     10 | ss      |
|    011 | bx    |    011 | bl    |     11 | ds      |
|    100 | sp    |    100 | ah    |        |         |
|    101 | bp    |    101 | ch    |        |         |
|    110 | si    |    110 | dh    |        |         |
|    111 | di    |    111 | bh    |        |         |

** w

1 bit

| binary | what? |
|--------+-------|
| 0      | byte  |
| 1      | word  |

* Data Transfer

** MOV - move

*** Register/Memory to/from Register

| =76543210= | =76  543 210= |
|------------+---------------|
| =100010dw= | =mod reg r/m= |

To move BX to AX.
  : 89 d8   MOV AX, BX

To move AX from BX (or BX to AX).
  : 8b d8   MOV BX, AX

To move AX to BX+SI.
  : 89 00   MOV [BX+SI], AX

To move AX from [BX+SI] (or BX+SI to AX).
  : 8b 00   MOV AX, [BX+SI]

To move BL to AL
  : 8a c3   MOV AL, BL

To move AL from BL.
  : 88 c3   MOV BL, AL

*** Immediate to Register/Memory

| =76543210= | =76  543 210= | =76543210= | =76543210=    |
|------------+---------------+------------+---------------|
| =1100011w= | =mod 000 r/m= | data       | data if w = 1 |

To move =0xdead= to AX.
  : c7 c0 ad de   MOV AX, 0xDEAD

To move =0xab= to AL.
  : c6 c0 ab      MOV AL, 0xAB

To move =0xdead= to [BX+SI]. 
  : c7 00 ad de   MOV WORD [BX+SI], 0xDEAD

To move =0xab= to [BX+SI].
  : c6 00 ab      MOV BYTE [BX+SI], 0xAB

*** Immediate to Register

| =76543 210= | =76543210= | =76543210=    |
|-------------+------------+---------------|
| =1011w reg= | data       | data if w = 1 |

To move =0xdead= to BX.
  : bb ad de   MOV BX, 0xDEAD

To move =0xab= to BX.
  : b3 ad de   MOV BX, 0xAB

*** Memory to Accumulator (ax)

| =76543210= | =76543210= | =76543210= |
|------------+------------+------------|
| =1010000w= | addr-low   | addr-high  |

To move =[0x7c00]= to AX.
  : a1 00 7c   MOV AX, [0x7C00]

To move =[0x7c00]= to AL.
  : a0 00 7c   MOV AL, [0x7C00]

*** Accumulator to Memory

| =76543210= | =76543210= | =76543210= |
|------------+------------+------------|
| =1010001w= | addr-low   | addr-high  |

To move AX to =[0x7c00]=.
  : a3 00 7c   MOV [0x7C00], AX

To move AL to =[0x7c00]=.
  : a2 00 7c   MOV [0x7C00], AL

*** Register/Memory to Segment Register

| =76543210= | =76  5 43  210= |
|------------+-----------------|
| =10001110= | =mod 0 reg r/m= |

MOV CS, REGISTER/MEMORY is not allowed.

To move AX to DS.
  : 8e d8   MOV DS, AX

To move [BX+SI] to SS.
  : 8e 10   MOV SS, [BX+SI]

*** Segment Register to Register/Memory

| =76543210= | =76  5 43  210= |
|------------+-----------------|
| =10001100= | =mod 0 reg r/m= |

To move DS to AX.
  : 8c d8      MOV AX, DS

To move [BX+SI+0x20] to SS.
  : 8c 50 20   MOV [BX+SI+0x20], SS

** PUSH - push

*** Register/Memory

| =76543210= | =76  543 210= |
|------------+---------------|
| =11111111= | =mod 110 r/m= |

To push AX.
  : ff f0         PUSH AX

To push [BX+SI].
  : ff 30         PUSH WORD [BX+SI]

To push [BX+SI+0x20].
  : ff 70 20      PUSH WORD [BX+SI+0x20]

To push [BX+SI+0x1020].
  : ff b0 20 10   PUSH WORD [BX+SI+0x1020]

*** Register

| =76543210= |
|------------|
| =01010reg= |

To push AX.
  : 50   PUSH AX

To push BX.
  : 53   PUSH BX

*** Segment Register

| =765 43  210= |
|---------------|
| =000 reg 110= |

To push ES.
  : 06   PUSH ES

To push CS.
  : 0e   PUSH CS

** POP - pop

*** Register/Memory

| =76543210= | =76  543 210= |
|------------+---------------|
| =10001111= | =mod 000 r/m= |

To pop AX.
  : 8f c0         POP AX

To pop [BX+SI].
  : 8f 00         POP WORD [BX+SI]

To pop [BX+SI+0x20].
  : 8f 40 20      POP WORD [BX+SI+0x20]

To pop [BX+SI+0x1020].
  : 8f 80 20 10   POP WORD [BX+SI+0x1020]

*** Register

| =76543210= |
|------------|
| =01011reg= |

To pop AX.
  : 58   POP AX

To pop BX.
  : 5b   POP BX

*** Segment Register

| =765 43  210= |
|---------------|
| =000 reg 111= |

To pop ES.
  : 07   POP ES

To pop DS.
  : 1f   POP DS

It is impossible to pop CS.

** OUT - output to

*** Fixed Port

| =76543210= | =76543210= |
|------------+------------|
| =1110011w= | port       | 

To output AX to 0x60.
  : e7 60   OUT 0x60, AX

*** Variable Port

| =76543210= |
|------------+
| =1110111w= |

To output AX to DX.
  : ef   OUT DX, AX

To output AL to DX.
  : ee   OUT DX, AL

