Follows is an introduction to using [[http://www.sbcl.org/][sbcl]] and [[http://www.gnu.org/software/emacs/][GNU/Emacs]]. [fn:1] This guide assumes
GNU/Linux is being used. These instructions may work with macs because
those are unix like but no promises.

* Installing tools
  First off lets make ourselves a lisp dir:
  : mkdir ~/lisp

  Lisp's package management system usually requires a special subdir for
  storing symlinks to lisp packages, mine is:
  : mkdir ~/lisp/asdf

  I suggest you do the same. Leave these two directories empty. They will
  get filled up as we go along.

*** SBCL
    There are other lisp implementations, a pretty complete listing is at
    [[http://www.cliki.net/Common%20Lisp%20implementation][clwiki]]. For this guide we use SBCL as it is a fast and free[fn:2] common
    lisp implementation.

    Building sbcl requires having an existing lisp on the system, so use
    your package manager to grab a copy of your distro's version of
    sbcl. For Debian based things[fn:3] use the following:
    : aptitude install sbcl

    Now grab a copy of sbcl's git source. We want the trunk build as most
    distros don't update sbcl every release.
    : cd ~/lisp && git clone git://sbcl.boinkor.net/sbcl

    Go into the new sbcl directory and build it:
    : cd ~/lisp/sbcl && bash make.sh

    When the compile is done, install it to =/usr/local/=:
    : cd ~/lisp/sbcl && bash install.sh

    Typing =sbcl= at the command prompt should drop you into the lisp
    repl. [fn:4] Entering =(+ 1 2)= and hitting RET[fn:5] should print the
    number =3= back to you. When you are done playing with it, exit it by
    =(sb-ext:quit)=.

*** GNU/Emacs
    This is optional.[fn:1] If you don't want to install emacs, see
    [[*rlwrap]].

    On debian systems, doing the following works:
    : aptitude install emacs

    We want to be using the gui version of emacs, especially if you are
    new to the editor. The menu bar at the top contains some of the most
    common emacs commands. All the entriesl have the appropriate keyboard
    combination next to the command name. Learning the keys starts with
    using the menu extensively until the shortcuts are memorized. Look in
    [[*Tips]] for more general emacs advice.

***** Slime
      Lisp works best when the [[http://common-lisp.net/project/slime/][slime]] repl is used. Grab a copy from the
      source repository as the released version is over a year old.
      : cd ~/lisp && git clone  git://github.com/nablaone/slime.git

      Now tell Emacs where slime is by editing your [[config file]], usually
      at =~/.emacs= or =~/.emacs.d/init.el=, and add the following:

      #+BEGIN_SRC elisp
      ;;; Tell emacs where slime/swank is.
      (add-to-list 'load-path "~/lisp/slime")
      (add-to-list 'load-path "~/lisp/slime/contrib")

      ;;; various libraries that slime will use, plus slime!
      (require 'inf-lisp)
      (require 'slime)
      (require 'inferior-slime)
      (require 'slime-autodoc)

      ;;; Add more lisps to this lisp if/when you have them.
      (setq slime-lisp-implementations
        '((sbcl ("sbcl"))))

      (slime-setup '(slime-repl  slime-fancy-inspector slime-asdf
                                 slime-parse slime-mrepl
                                 slime-autodoc
                                 slime-references
                                 slime-sprof
                                 slime-fancy))
      #+END_SRC

      Now restart your emacs to load this file in. To test and see if sbcl
      and emacs are properly setup hit =M-x slime RET= where =M-x= 
      is likely your Alt key on a standard PC and RET is your return or enter key. 
      If this notation confuses you, please skip down to  [[*reading keyboard shortcuts]].
      After this you should see a lisp repl show up.

***** Tips
******* reading keyboard shortcuts
        Emacs key notations for commands is a little odd, but these short
        forms are portable across keyboards and operating systems. The two
        primary ones are =C-<something>= and
        =M-<something>=. =C-<something>= means control + some other
        key. =M-<something>= means alt plus some other key. Your control
        and alt keys may be labeled something else.

******* Config File
        #+ <<config file>>
        Emacs is configured with emacs lisp, the same language most of the
        editor is written in. Find this file at =~/.emacs= or
        =~/.emacs.d/init.el=. Make sure if you use =~/.emacs= that
        =~/.emacs.d/init.el= _does *not* exist_.

*** rlwrap
    This is a GNU readline wrapper. If you are using emacs, you do not
    need to install this.

    Installing rlwrap on a debian based system[fn:3] looks like:
    : aptitude install rlwrap

    Using rlwrap with sbcl looks like:
    : rlwrap sbcl

    Calling it with rlwrap means prompt history is kept and deleting
    letters/going backwards in the command prompt works. There is a pretty
    good set of [[http://utopia.knoware.nl/~hlub/uck/rlwrap/rlwrap.html][documentation]].


* Footnotes

[fn:1] Emacs is not _required_ to program lisp, but the combination of
[[http://www.gnu.org/software/emacs/][GNU/Emacs]] and slime is very hard to beat. The quality of lisp developing
with the two systems is on par with advanced IDEs for other languages.

[fn:2] BSD licensed, derived from CMUCL.

[fn:3] Debian based is anything derived from debian including ubuntu and
derivatives of ubuntu. Anything that has =apt-get= or =aptitude= is debian
based.

# <<<repl>>>
[fn:4] REPL in lisp is shorthand for /Read Eval Print Loop/.

[fn:5] RET is emacs speak for the return or enter key.
